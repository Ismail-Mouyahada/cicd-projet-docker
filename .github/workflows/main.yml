# Nom du `workflow`
name: Build et push des images Docker

# Événements déclenchant le `workflow`
on:
  push:  # Déclenche le `workflow` lors d'un `push`
    branches:  # Filtrer les branches
      - main  # Exécute sur la branche `main`

# Liste des jobs
jobs:
  build:  # Nom du job
    runs-on: ubuntu-latest  # S'exécute sur la dernière version d'Ubuntu
    permissions:  # Permissions nécessaires
      packages: write  # Autorisation d'écrire aux packages

    # Stratégie de matrice pour exécuter des tâches en parallèle
    strategy:
      matrix:
        include:  # Inclure des variables supplémentaires
          - path: 'frontend'  # Lorsque le chemin est "frontend"
            full_image_name: ghcr.io/${{ github.repository }}/frontend  # Nom complet de l'image pour "frontend"
          - path: 'node-api'  # Lorsque le chemin est "node-api"
            full_image_name: ghcr.io/${{ github.repository }}/node-api  # Nom complet de l'image pour "node-api"

    # Étapes du job
    steps:
      - name: Checkout code  # Récupère le code source
        uses: actions/checkout@v4  # Utilise l'action GitHub pour le checkout

      - name: Mise en place de Buildx  # Configure Docker Buildx
        uses: docker/setup-buildx-action@v3  # Utilise l'action Buildx

      - name: Login sur GitHub Package Registry  # Connexion à GitHub Container Registry
        uses: docker/login-action@v3  # Utilise l'action de login Docker
        with:  # Avec ces paramètres
          registry: ghcr.io  # URL du registre
          username: ${{ github.actor }}  # Nom d'utilisateur GitHub
          password: ${{ secrets.GITHUB_TOKEN }}  # `GITHUB_TOKEN` pour l'authentification

      - name: Récupération des métadonnées  # Récupère les métadonnées pour Docker
        id: metadata  # ID pour cette étape
        uses: docker/metadata-action@v5  # Utilise l'action de métadonnées
        with:
          images: ${{ matrix.full_image_name }}  # Utilise le nom complet de l'image depuis la matrice

      - name: Build et push  # Construit et pousse l'image
        uses: docker/build-push-action@v5  # Utilise l'action de build et push Docker
        with:  # Avec ces paramètres
          push: true  # Pousse l'image
          tags: ${{ matrix.full_image_name }}:latest  # Tags pour l'image
          context: ./${{ matrix.path }}  # Contexte pour la construction Docker
          cache-from: type=gha  # Utilise le cache GitHub Actions
          cache-to: type=gha,mode=max  # Enregistre le cache pour les utilisations futures